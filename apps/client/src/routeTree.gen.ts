/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as CallbackImport } from './routes/callback'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthFeedImport } from './routes/_auth.feed'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const AuthUsernameLazyImport = createFileRoute('/_auth/$username')()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CallbackRoute = CallbackImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthUsernameLazyRoute = AuthUsernameLazyImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.$username.lazy').then((d) => d.Route),
)

const AuthFeedRoute = AuthFeedImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/callback': {
      id: '/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof CallbackImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/feed': {
      id: '/_auth/feed'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof AuthFeedImport
      parentRoute: typeof AuthImport
    }
    '/_auth/$username': {
      id: '/_auth/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof AuthUsernameLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthFeedRoute: typeof AuthFeedRoute
  AuthUsernameLazyRoute: typeof AuthUsernameLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthFeedRoute: AuthFeedRoute,
  AuthUsernameLazyRoute: AuthUsernameLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof AuthRouteWithChildren
  '/callback': typeof CallbackRoute
  '/login': typeof LoginRoute
  '/feed': typeof AuthFeedRoute
  '/$username': typeof AuthUsernameLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof AuthRouteWithChildren
  '/callback': typeof CallbackRoute
  '/login': typeof LoginRoute
  '/feed': typeof AuthFeedRoute
  '/$username': typeof AuthUsernameLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_auth': typeof AuthRouteWithChildren
  '/callback': typeof CallbackRoute
  '/login': typeof LoginRoute
  '/_auth/feed': typeof AuthFeedRoute
  '/_auth/$username': typeof AuthUsernameLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/callback' | '/login' | '/feed' | '/$username'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/callback' | '/login' | '/feed' | '/$username'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/callback'
    | '/login'
    | '/_auth/feed'
    | '/_auth/$username'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRouteWithChildren
  CallbackRoute: typeof CallbackRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRouteWithChildren,
  CallbackRoute: CallbackRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/callback",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/feed",
        "/_auth/$username"
      ]
    },
    "/callback": {
      "filePath": "callback.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/feed": {
      "filePath": "_auth.feed.tsx",
      "parent": "/_auth"
    },
    "/_auth/$username": {
      "filePath": "_auth.$username.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
